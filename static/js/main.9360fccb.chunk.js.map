{"version":3,"sources":["Components/WeatherForecast/index.js","Components/WeatherHighlight/index.js","App.js","index.js"],"names":["Card","date","minTemp","maxTemp","weatherIcon","toggleTemp","celciusToFarheint","temp","className","moment","format","src","alt","toFixed","WeatherHighlight","title","unit","measurement","children","App","useState","loading","isLoading","city","setCity","weatherState","setWeatherState","setTemp","setWeatherIcon","weatherForecast","setWeatherForecast","toggleNavbar","isToggleNavbar","cityInput","setCityInput","searchHistory","setSearchHistory","toggleTempScale","istoggleTempScale","defaultLocation","setDefaultLocation","useEffect","axios","get","then","data","woeid","consolidated_weather","weather_state_name","the_temp","weather_state_abbr","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","alert","color","size","window","screen","width","type","placeholder","onFocus","onClick","calendar","split","style","height","value","onChange","e","target","toLowerCase","prev","map","item","innerText","backgroundColor","slice","id","applicable_date","min_temp","max_temp","wind_speed","wind_direction","wind_direction_compass","humidity","visibility","air_pressure","transform","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9360fccb.chunk.js","sourcesContent":["import { useState } from 'react';\nimport moment, { max } from 'moment';\n\nconst Card = ({ date, minTemp, maxTemp, weatherIcon, toggleTemp }) => {\n  const celciusToFarheint = (temp) => (temp * 9) / 5 + 32;\n\n  return (\n    <div className='card'>\n      <p className='card__date'>{moment(date).format('ddd, D MMM')}</p>\n      <img\n        className='card__icon'\n        src={`https://www.metaweather.com/static/img/weather/${weatherIcon}.svg`}\n        alt={`${weatherIcon}.png`}\n      />\n      <div className='card__temp'>\n        <p className='temp__min'>\n          {toggleTemp\n            ? minTemp.toFixed(0)\n            : celciusToFarheint(minTemp).toFixed(0)}\n          &#8451;\n        </p>\n        <p className='temp__max'>\n          {toggleTemp\n            ? maxTemp.toFixed(0)\n            : celciusToFarheint(maxTemp).toFixed(0)}\n          &#8451;\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","const WeatherHighlight = ({ title, unit, measurement, children }) => {\n  return (\n    <div className='wh__card'>\n      <p className='wh__title'> {title}</p>\n      <p className='wh__unit'>\n        {unit && unit.toFixed(0)}\n        <span className='wh__measurement'>{measurement}</span>\n      </p>\n      {children}\n    </div>\n  );\n};\n\nexport default WeatherHighlight;\n","import { useState, useEffect, Fragment } from 'react';\nimport axios from 'axios';\nimport moment from 'moment';\nimport ClipLoader from 'react-spinners/ClipLoader';\nimport Card from './Components/WeatherForecast';\nimport WeatherHighlightCard from './Components/WeatherHighlight';\n\nconst App = () => {\n  const [loading, isLoading] = useState(true);\n  const [city, setCity] = useState();\n  const [weatherState, setWeatherState] = useState();\n  const [temp, setTemp] = useState();\n  const [weatherIcon, setWeatherIcon] = useState();\n  const [weatherForecast, setWeatherForecast] = useState();\n  const [toggleNavbar, isToggleNavbar] = useState(true);\n  const [cityInput, setCityInput] = useState('');\n  const [searchHistory, setSearchHistory] = useState([]);\n  const [toggleTempScale, istoggleTempScale] = useState(true);\n  const [defaultLocation, setDefaultLocation] = useState();\n\n  const getDataGeolocation = () => {\n    navigator.geolocation.getCurrentPosition(\n      (position) => {\n        isLoading(true);\n        axios\n          .get(\n            `https://www.metaweather.com/api/location/search/?lattlong=${position.coords.latitude},${position.coords.longitude}`\n          )\n          .then(({ data }) => {\n            /* weather data for specific city */\n            axios\n              .get(`https://www.metaweather.com/api/location/${data[0].woeid}/`)\n              .then(({ data }) => {\n                setWeatherState(\n                  data.consolidated_weather[0].weather_state_name\n                );\n                setTemp(data.consolidated_weather[0].the_temp);\n                setWeatherForecast(data.consolidated_weather);\n                setWeatherIcon(data.consolidated_weather[0].weather_state_abbr);\n              });\n            setCity(data[0].title);\n            setDefaultLocation(data[0].title);\n            isLoading(false);\n          });\n      },\n      () => alert('please enable location')\n    );\n  };\n\n  useEffect(() => {\n    cityInput !== ''\n      ? axios\n          .get(`https://www.metaweather.com/api/location/search/?query=${city}`)\n          .then(({ data }) => {\n            axios\n              .get(`https://www.metaweather.com/api/location/${data[0].woeid}/`)\n              .then(({ data }) => {\n                setWeatherState(\n                  data.consolidated_weather[0].weather_state_name\n                );\n                setTemp(data.consolidated_weather[0].the_temp);\n                setWeatherForecast(data.consolidated_weather);\n                setWeatherIcon(data.consolidated_weather[0].weather_state_abbr);\n              });\n          })\n      : getDataGeolocation();\n  }, [city]);\n\n  return loading ? (\n    <div className='loading'>\n      <ClipLoader color={'#9ca3af'} loading={loading} size={150} />\n    </div>\n  ) : window.screen.width > 375 ? (\n    /* desktop/ laptop version */\n    <div className='root__container'>\n      <div className='app__container'>\n        <div className='cw__container'>\n          {toggleNavbar ? (\n            <Fragment>\n              <div className='navbar'>\n                <input\n                  type='text'\n                  placeholder='enter city'\n                  className='navbar__input'\n                  onFocus={() => isToggleNavbar(!toggleNavbar)}\n                />\n                <button\n                  className='navbar__btn'\n                  onClick={() => {\n                    setCityInput('');\n                    setCity(defaultLocation);\n                  }}\n                >\n                  <i className='fas fa-map-marker-alt fa-lg'></i>\n                </button>\n              </div>\n              <img\n                src={`https://www.metaweather.com/static/img/weather/${weatherIcon}.svg`}\n                alt={`${weatherIcon}.png`}\n                className='cw__icon'\n              />\n              <p className='cw__temp'>\n                {temp?.toFixed(0)}\n                <span className='temp__symbol'>&#8451;</span>\n              </p>\n              <p className='cw__state'>{weatherState}</p>\n              <div className='cw__info'>\n                <p className='cw__present'>\n                  {moment().calendar().split(' at')[0]}\n                </p>\n                <p className='cw__date'>{moment().format('ddd, D MMM')}</p>\n              </div>\n              <div className='cw__location'>\n                <i className='fas fa-map-marker-alt fa-lg'>\n                  <span className='location__name'>{city}</span>\n                </i>\n              </div>\n            </Fragment>\n          ) : (\n            <div className='dropdown' style={{ height: '100vh' }}>\n              <div\n                className='dropdown__close'\n                onClick={() => isToggleNavbar(!toggleNavbar)}\n              >\n                <i className='fas fa-times fa-lg'></i>\n              </div>\n              <div className='dropdown__search'>\n                <input\n                  type='text'\n                  placeholder='search location'\n                  className='dropdown__input'\n                  value={cityInput}\n                  onChange={(e) => setCityInput(e.target.value.toLowerCase())}\n                />\n                <button\n                  className='dropdown__btn'\n                  onClick={() => {\n                    setCity(cityInput);\n                    setSearchHistory((prev) => [cityInput, ...prev]);\n                    isToggleNavbar(!toggleNavbar);\n                  }}\n                >\n                  search\n                </button>\n                <i className='fas fa-search search__icon'></i>\n              </div>\n              <ul className='dropdown__list'>\n                {searchHistory.map((item) => {\n                  return (\n                    <li\n                      className='dropdown__item'\n                      key={item}\n                      onClick={(e) => {\n                        setCity(e.target.innerText);\n                        isToggleNavbar(!toggleNavbar);\n                      }}\n                    >\n                      {item}\n                      <span>\n                        <i className='fas fa-chevron-right'></i>\n                      </span>\n                    </li>\n                  );\n                })}\n              </ul>\n            </div>\n          )}\n        </div>\n        {/* weather detail section */}\n        <div className='weather__info'>\n          <div className='measurement__container'>\n            <button\n              className='temp__btn'\n              style={{\n                backgroundColor: toggleTempScale ? `#E7E7EB` : '#585676',\n                color: toggleTempScale ? 'black' : 'white',\n              }}\n              onClick={() => istoggleTempScale(!toggleTempScale)}\n            >\n              &#8451;\n            </button>\n            <button\n              className='temp__btn'\n              style={{\n                backgroundColor: !toggleTempScale ? `#E7E7EB` : '#585676',\n                color: !toggleTempScale ? 'black' : 'white',\n              }}\n              onClick={() => istoggleTempScale(!toggleTempScale)}\n            >\n              &#8457;\n            </button>\n          </div>\n          <div className='wf__container'>\n            {weatherForecast\n              ?.slice(1)\n              .map(\n                ({\n                  id,\n                  applicable_date,\n                  min_temp,\n                  max_temp,\n                  weather_state_abbr,\n                }) => {\n                  return (\n                    <Card\n                      key={id}\n                      date={applicable_date}\n                      minTemp={min_temp}\n                      maxTemp={max_temp}\n                      weatherIcon={weather_state_abbr}\n                      toggleTemp={toggleTempScale}\n                    />\n                  );\n                }\n              )}\n          </div>\n          <p className='detail__text'>todays highlights</p>\n          <div className='wh__container'>\n            {weatherForecast\n              ?.slice(0, 1)\n              .map(\n                ({\n                  wind_speed,\n                  wind_direction,\n                  wind_direction_compass,\n                  humidity,\n                  visibility,\n                  air_pressure,\n                }) => {\n                  return (\n                    <Fragment>\n                      <WeatherHighlightCard\n                        key={1001}\n                        title={'wind status'}\n                        unit={wind_speed}\n                        measurement={'mph'}\n                        children={\n                          <p>\n                            <i\n                              className='fas fa-location-arrow fa-sm wh__icon'\n                              style={{\n                                transform: `rotate(${\n                                  wind_direction.toFixed(0) - 45\n                                }deg)`,\n                              }}\n                            ></i>\n                            <span>{wind_direction_compass}</span>\n                          </p>\n                        }\n                      />\n                      <WeatherHighlightCard\n                        key={1002}\n                        title='humidity'\n                        unit={humidity}\n                        measurement='%'\n                        children={\n                          <div className='wh__progress'>\n                            <div\n                              className='progress__percentage'\n                              style={{ width: `${humidity}%` }}\n                            ></div>\n                          </div>\n                        }\n                      />\n                      <WeatherHighlightCard\n                        key={1003}\n                        title='visibility'\n                        unit={visibility}\n                        measurement=' miles'\n                      />\n                      <WeatherHighlightCard\n                        key={1004}\n                        title='air pressure'\n                        unit={air_pressure}\n                        measurement='mb'\n                      />\n                    </Fragment>\n                  );\n                }\n              )}\n          </div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    /* mobile version */\n    <div className='app__container'>\n      {toggleNavbar ? (\n        <div className='navbar'>\n          <input\n            type='text'\n            placeholder='Enter location'\n            className='navbar__input'\n            onFocus={() => isToggleNavbar(!toggleNavbar)}\n          />\n          <button className='navbar__btn'>\n            <i\n              className='fas fa-map-marker-alt fa-lg'\n              onClick={() => {\n                setCityInput('');\n                setCity(defaultLocation);\n              }}\n            ></i>\n          </button>\n        </div>\n      ) : (\n        <div className='dropdown' style={{ height: '100vh' }}>\n          <div\n            className='dropdown__close'\n            onClick={() => isToggleNavbar(!toggleNavbar)}\n          >\n            <i className='fas fa-times fa-lg'></i>\n          </div>\n          <div className='dropdown__search'>\n            <input\n              type='text'\n              placeholder='search location'\n              className='dropdown__input'\n              value={cityInput}\n              onChange={(e) => setCityInput(e.target.value.toLowerCase())}\n            />\n            <button\n              className='dropdown__btn'\n              onClick={() => {\n                setCity(cityInput);\n                setSearchHistory((prev) => [cityInput, ...prev]);\n                isToggleNavbar(!toggleNavbar);\n              }}\n            >\n              search\n            </button>\n            <i className='fas fa-search search__icon'></i>\n          </div>\n          <ul className='dropdown__list'>\n            {searchHistory.map((item) => {\n              return (\n                <li\n                  className='dropdown__item'\n                  key={item}\n                  onClick={(e) => {\n                    setCity(e.target.innerText);\n                    isToggleNavbar(!toggleNavbar);\n                  }}\n                >\n                  {item}\n                  <span>\n                    <i className='fas fa-chevron-right'></i>\n                  </span>\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n      {/* current weather section*/}\n      <div className='cw__container'>\n        <img\n          src={`https://www.metaweather.com/static/img/weather/${weatherIcon}.svg`}\n          alt={`${weatherIcon}.png`}\n          className='cw__icon'\n        />\n        <p className='cw__temp'>\n          {temp?.toFixed(0)}\n          <span className='temp__symbol'>&#8451;</span>\n        </p>\n        <p className='cw__state'>{weatherState}</p>\n        <div className='cw__info'>\n          <p className='cw__present'>{moment().calendar().split(' at')[0]}</p>\n          <p className='cw__date'>{moment().format('ddd, D MMM')}</p>\n        </div>\n        <div className='cw__location'>\n          <i className='fas fa-map-marker-alt fa-lg'>\n            <span className='location__name'>{city}</span>\n          </i>\n        </div>\n      </div>\n      {/* weather forecast section */}\n      <div className='wf__container'>\n        {/* weather forecast cards */}\n        <div className='card__container'>\n          {weatherForecast\n            ?.slice(1)\n            .map(\n              ({\n                id,\n                applicable_date,\n                min_temp,\n                max_temp,\n                weather_state_abbr,\n              }) => {\n                return (\n                  <Card\n                    key={id}\n                    date={applicable_date}\n                    minTemp={min_temp}\n                    maxTemp={max_temp}\n                    weatherIcon={weather_state_abbr}\n                  />\n                );\n              }\n            )}\n        </div>\n        {/* weather highlights section */}\n        <p className='detail__text'>todays highlights</p>\n        <div className='wh__container'>\n          {weatherForecast\n            ?.slice(0, 1)\n            .map(\n              ({\n                wind_speed,\n                wind_direction,\n                wind_direction_compass,\n                humidity,\n                visibility,\n                air_pressure,\n              }) => {\n                return (\n                  <Fragment>\n                    <WeatherHighlightCard\n                      key={1001}\n                      title={'wind status'}\n                      unit={wind_speed}\n                      measurement={'mph'}\n                      children={\n                        <p>\n                          <i\n                            className='fas fa-location-arrow fa-sm wh__icon'\n                            style={{\n                              transform: `rotate(${\n                                wind_direction.toFixed(0) - 45\n                              }deg)`,\n                            }}\n                          ></i>\n                          <span>{wind_direction_compass}</span>\n                        </p>\n                      }\n                    />\n                    ;\n                    <WeatherHighlightCard\n                      key={1002}\n                      title='humidity'\n                      unit={humidity}\n                      measurement='%'\n                      children={\n                        <div className='wh__progress'>\n                          <div\n                            className='progress__percentage'\n                            style={{ width: `${humidity}%` }}\n                          ></div>\n                        </div>\n                      }\n                    />\n                    ;\n                    <WeatherHighlightCard\n                      key={1003}\n                      title='visibility'\n                      unit={visibility}\n                      measurement=' miles'\n                    />\n                    ;\n                    <WeatherHighlightCard\n                      key={1004}\n                      title='air pressure'\n                      unit={air_pressure}\n                      measurement='mb'\n                    />\n                    ;\n                  </Fragment>\n                );\n              }\n            )}\n        </div>\n        {/* footer section */}\n        <div className='footer'>\n          <p className='footer__text'>\n            Created by:{' '}\n            <a href='https://github.com/gman112' className='footer__link'>\n              Guled Ibrahim\n            </a>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './App.css';\nimport '../node_modules/@fortawesome/fontawesome-free/css/all.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}